@page "/supervisor"
@page "/supervisor/{page}"

@using IIoTEngTool.ServicesApp
@using IIoTEngTool.Components.Pager
@using IIoTEngTool.Data
@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;

@inject NavigationManager NavigationManager
@inject GetSupervisor SupervisorInstance

<h1>Supervisor</h1>

<table class="table">
    <thead>
        <tr>
            <th>SupervisorId</th>
            <th>ConnectionStatus</th>
            <th>ScanStatus</th>
            <th>ScanMask</th>
            <th>PortRange</th>
        </tr>
    </thead>
    <tbody>
        @{string connectStatus = "Disconnected"; }
        @foreach (var supervisor in pagedSupervisorList.Results)
        {
            <tr>
                @if (supervisor.HasApplication == true)
                {
                    <td>
                        <a href='endpoint/@supervisor.SupervisorModel.Id'>
                            @supervisor.SupervisorModel.Id
                        </a>
                    </td>
                }
                else
                {
                    <td>@supervisor.SupervisorModel.Id</td>
                }
                @{connectStatus = supervisor.SupervisorModel.Connected == true ? "Connected" : "Disconnected";}
                <td>
                    @connectStatus
                </td>
                <td>
                    <input type="checkbox" @bind="@supervisor.ScanStatus" @onclick="@(() => SetScan(supervisor))" />
                    @{ string output;}
                    @if (supervisor.ScanStatus == true)
                    {
                        output = "On";
                    }
                    else
                    {
                        output = "Off";
                    }
                    @output
                    @if (supervisor.IsSearching)
                    {
                        <div class=" pos-right loader"></div>
                    }
                </td>
                <td></td>
                <td></td>
            </tr>
        }
    </tbody>
</table>

<Pager Result=@supervisorList PageChanged=@((Page) => PagerPageChanged(Page)) />


@code {

    [Parameter]
    public string Page { get; set; } = "1";

    IEnumerable<ApplicationInfoApiModel> application { get; set; }
    string endpointId { get; set; } = "";
    bool IsSearching { get; set; } = false;

    PagedResult<SupervisorInfo> supervisorList = new PagedResult<SupervisorInfo>();
    PagedResult<SupervisorInfo> pagedSupervisorList = new PagedResult<SupervisorInfo>();

    public void PagerPageChanged(int page)
    {
        pagedSupervisorList = supervisorList.GetPaged(page, 10);
        NavigationManager.NavigateTo("/supervisor/" + page);
    }

    protected override async Task OnInitializedAsync()
    {
        supervisorList = await SupervisorInstance.GetSupervisorList();
        Page = "1";
        pagedSupervisorList = supervisorList.GetPaged(Int32.Parse(Page), 10);
        application = SupervisorInstance.allApplications;
    }

    private async Task SetScan(SupervisorInfo supervisor)
    {
        SupervisorInstance.SetScan(supervisor);

        if (supervisor.ScanStatus == false)
        {
            supervisor.IsSearching = true;

            await Task.Delay(10000);
            supervisorList = await SupervisorInstance.GetSupervisorList();
            pagedSupervisorList = supervisorList.GetPaged(Int32.Parse(Page), 10);
            application = SupervisorInstance.allApplications;

            supervisor.IsSearching = false;
            await Task.CompletedTask;
        }   
    }
}
